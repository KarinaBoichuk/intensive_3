import streamlit as st
import pandas as pd
import pickle
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    try:
        with open('armature_price_model.pkl', 'rb') as f:
            model = pickle.load(f)
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        df = pd.read_csv('111updated_merged.csv', parse_dates=['dt'])
        df = df.dropna(subset=['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'])
        return df.sort_values('dt')
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

# –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
def find_nearest_date(df, target_date):
    dates = pd.Series(df['dt'].dt.date.unique())
    if target_date in dates.values:
        return target_date
    past_dates = dates[dates <= target_date]
    if not past_dates.empty:
        return past_dates.iloc[-1]
    return dates.iloc[0]

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫ –∞—Ä–º–∞—Ç—É—Ä—ã")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏
    df = load_data()
    model = load_model()
    
    if df is None or model is None:
        st.stop()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    min_date = df['dt'].min().date()
    max_date = df['dt'].max().date()
    
     # –í—ã–±–æ—Ä –¥–∞—Ç—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    selected_date = st.sidebar.date_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        value=max_date,
        min_value=min_date,
        max_value=max_date + timedelta(days=365)
    )
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
    nearest_date = find_nearest_date(df, selected_date)
    if nearest_date != selected_date:
        st.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏: {nearest_date}")
    
    weekly_need = st.sidebar.number_input(
        "–ù–µ–¥–µ–ª—å–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å (—Ç–æ–Ω–Ω)",
        min_value=1,
        value=100
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    last_data = df[df['dt'].dt.date <= nearest_date].iloc[-1]
    current_price = last_data['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É']
    
    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        avg_price = df['–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'].mean()
        
        if current_price > avg_price:
            predictions = [current_price * (1.02 ** i) for i in range(1, 7)]
            trend = "—Ä–æ—Å—Ç"
            recommended_weeks = 3
        else:
            predictions = [current_price * (0.99 ** i) for i in range(1, 7)]
            trend = "—Å–Ω–∏–∂–µ–Ω–∏–µ"
            recommended_weeks = 1
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ")
        st.success(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä–µ–º: {recommended_weeks * weekly_need} —Ç–æ–Ω–Ω")
        st.success(f"–ü–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {recommended_weeks} –Ω–µ–¥–µ–ª—å")
        st.info(f"–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: {trend} —Ü–µ–Ω")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_dates = [nearest_date + timedelta(weeks=i) for i in range(1, 7)]
        chart_data = pd.DataFrame({
            "–î–∞—Ç–∞": [nearest_date] + forecast_dates,
            "–¶–µ–Ω–∞": [current_price] + predictions,
            "–¢–∏–ø": ["–§–∞–∫—Ç"] + ["–ü—Ä–æ–≥–Ω–æ–∑"]*6
        }).set_index("–î–∞—Ç–∞")
        
        st.line_chart(chart_data)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        st.table(pd.DataFrame({
            "–ù–µ–¥–µ–ª—è": range(1, 7),
            "–î–∞—Ç–∞": forecast_dates,
            "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": [f"{p:.2f}" for p in predictions],
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": [f"{((p-current_price)/current_price*100):.1f}%" for p in predictions]
        }))
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")

if __name__ == "__main__":
    main()